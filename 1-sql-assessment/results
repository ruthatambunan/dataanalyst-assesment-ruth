Basic Queries
Calculate inventory turnover metrics per branch:
-- Write a query to show:
-- - Branch name
-- - Total incoming stock (IN transactions)
-- - Total outgoing stock (OUT transactions)
-- - Current stock level
-- - Number of expired items (EXP transactions)
-- For the last 3 months, ordered by highest stock turnover rate

query :
SELECT 
    bd.branch_name AS BranchName,
    SUM(CASE WHEN im.transaction_type = 'IN' THEN im.quantity ELSE 0 END) AS TotalIncomingStock,
    SUM(CASE WHEN im.transaction_type = 'OUT' THEN im.quantity ELSE 0 END) AS TotalOutgoingStock,
    (SUM(CASE WHEN im.transaction_type = 'IN' THEN im.quantity ELSE 0 END) - 
     SUM(CASE WHEN im.transaction_type = 'OUT' THEN im.quantity ELSE 0 END)) AS CurrentStockLevel,
    SUM(CASE WHEN im.transaction_type = 'EXP' AND im.expiry_date < CURRENT_DATE THEN im.quantity ELSE 0 END) AS ExpiredItems,
    -- Stock Turnover Rate calculation (avoid division by zero)
    CASE 
        WHEN (SUM(CASE WHEN im.transaction_type = 'IN' THEN im.quantity ELSE 0 END) - 
              SUM(CASE WHEN im.transaction_type = 'OUT' THEN im.quantity ELSE 0 END)) > 0
        THEN 
            SUM(CASE WHEN im.transaction_type = 'OUT' THEN im.quantity ELSE 0 END) / 
            (SUM(CASE WHEN im.transaction_type = 'IN' THEN im.quantity ELSE 0 END) - 
             SUM(CASE WHEN im.transaction_type = 'OUT' THEN im.quantity ELSE 0 END))
        ELSE 0
    END AS StockTurnoverRate
FROM 
    inventory_movements im
JOIN 
    branch_details bd ON im.branch_code = bd.branch_code
WHERE 
    im.transaction_date >= CURRENT_DATE - INTERVAL '3 MONTH' -- Only for the last 3 months
GROUP BY 
    bd.branch_name
ORDER BY 
    StockTurnoverRate DESC; -- Ordered by highest stock turnover rate


penjelasan :
Berikut adalah penjelasan alur query secara sederhana:

1. **JOIN Tabel:**
   - Query ini menggabungkan dua tabel: `inventory_movements` (berisi data pergerakan stok) dan `branch_details` (berisi informasi cabang).
   - Proses penggabungan dilakukan menggunakan `branch_code`, yang ada di kedua tabel. Ini memungkinkan kita mendapatkan informasi nama cabang (`branch_name`) untuk setiap pergerakan stok.

2. **Kondisi `WHERE`:**
   - Hanya pergerakan stok dalam 3 bulan terakhir yang diambil, berdasarkan tanggal transaksi (`transaction_date`). 
   - Filter ini dilakukan dengan `WHERE im.transaction_date >= CURRENT_DATE - INTERVAL '3 MONTH'`, yang memastikan hanya transaksi dalam rentang waktu tersebut yang diproses.

3. **Perhitungan Kolom:**
   - **TotalIncomingStock**: Menghitung total stok yang masuk (`transaction_type = 'IN'`) dengan menjumlahkan `quantity` untuk transaksi dengan tipe 'IN'.
   - **TotalOutgoingStock**: Menghitung total stok yang keluar (`transaction_type = 'OUT'`) dengan menjumlahkan `quantity` untuk transaksi dengan tipe 'OUT'.
   - **CurrentStockLevel**: Menghitung stok saat ini dengan mengurangi `TotalOutgoingStock` dari `TotalIncomingStock`. Ini memberikan gambaran berapa banyak stok yang tersedia saat ini di cabang.
   - **ExpiredItems**: Menghitung jumlah stok yang sudah kadaluarsa (`transaction_type = 'EXP'` dan `expiry_date < CURRENT_DATE`), dengan menjumlahkan `quantity` dari transaksi yang memiliki tanggal kadaluarsa lebih awal dari hari ini.

4. **Stock Turnover Rate:**
   - **Stock Turnover Rate** menghitung seberapa cepat stok keluar dibandingkan dengan stok yang masuk.
   - Jika stok saat ini lebih dari 0, maka perhitungan turnover rate dilakukan dengan membandingkan `TotalOutgoingStock` dengan `CurrentStockLevel` (selisih antara stok masuk dan keluar).
   - Jika stok saat ini 0 atau kurang, turnover rate dianggap 0 (untuk menghindari pembagian dengan 0).

5. **GROUP BY**:
   - Data dikelompokkan berdasarkan nama cabang (`bd.branch_name`), sehingga hasilnya akan menunjukkan informasi untuk setiap cabang.

6. **ORDER BY**:
   - Hasil query diurutkan berdasarkan **StockTurnoverRate** secara menurun (DESC), sehingga cabang dengan turnover rate tertinggi muncul di bagian atas.

### Alur Query:
1. Gabungkan data pergerakan stok dan data cabang.
2. Ambil data hanya untuk transaksi dalam 3 bulan terakhir.
3. Hitung total stok masuk, stok keluar, stok saat ini, dan stok kadaluarsa.
4. Hitung tingkat perputaran stok (stock turnover rate) berdasarkan jumlah stok yang masuk dan keluar.
5. Kelompokkan hasilnya berdasarkan nama cabang dan urutkan berdasarkan stock turnover rate tertinggi.

Dengan alur ini, query akan menghasilkan daftar cabang, dengan informasi tentang stok yang masuk, keluar, stok saat ini, barang yang kadaluarsa, dan tingkat perputaran stok untuk masing-masing cabang.


Analyze staff performance and sales:
-- Write a query to find:
-- - Staff ID
-- - Staff's branch name
-- - Number of transactions handled
-- - Total sales amount
-- - Average transaction value
-- - Performance score
-- Only for active staff (no resignation date) in 2023

query :
SELECT
    s.staff_id,
    b.branch_name,
    COUNT(st.transaction_id) AS number_of_transactions,
    SUM(st.total_amount) AS total_sales_amount,
    AVG(st.total_amount) AS average_transaction_value,
    s.performance_score
FROM
    staff_records s
JOIN
    branch_details b ON s.branch_code = b.branch_code
LEFT JOIN
    sales_transactions st ON s.staff_id = st.staff_id
WHERE
    s.resignation_date IS NULL
    AND s.join_date <= '2023-12-31'
GROUP BY
    s.staff_id, b.branch_name, s.performance_score
ORDER BY
    total_sales_amount DESC;



Intermediate Queries (Optional)
Customer Purchase Patterns:
-- Write a query to identify:
-- - Products that are frequently bought together
-- - Minimum basket size of 2 items
-- - Show product pairs, frequency of co-occurrence
-- - Filter for combinations occurring at least 10 times
-- Include product names and categories
-- Order by co-occurrence frequency

SELECT
    p1.product_name AS product_1_name,
    p1.category_l1 AS product_1_category,
    p2.product_name AS product_2_name,
    p2.category_l1 AS product_2_category,
    COUNT(*) AS co_occurrence_frequency
FROM
    sales_line_items s1
JOIN
    sales_line_items s2 ON s1.transaction_id = s2.transaction_id
JOIN
    product_hierarchy p1 ON s1.product_code = p1.product_code
JOIN
    product_hierarchy p2 ON s2.product_code = p2.product_code
WHERE
    s1.product_code < s2.product_code  -- Avoid duplicates of pairs (e.g., P001 & P002, and P002 & P001)
GROUP BY
    p1.product_name, p1.category_l1, p2.product_name, p2.category_l1
HAVING
    COUNT(*) >= 10  -- Only include pairs bought at least 10 times
ORDER BY
    co_occurrence_frequency DESC;

