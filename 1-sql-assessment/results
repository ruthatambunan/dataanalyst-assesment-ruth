-- Number one
Basic Queries
Calculate inventory turnover metrics per branch:
-- Write a query to show:
-- - Branch name
-- - Total incoming stock (IN transactions)
-- - Total outgoing stock (OUT transactions)
-- - Current stock level
-- - Number of expired items (EXP transactions)
-- For the last 3 months, ordered by highest stock turnover rate

query :
SELECT 
    bd.branch_name AS BranchName,
    SUM(CASE WHEN im.transaction_type = 'IN' THEN im.quantity ELSE 0 END) AS TotalIncomingStock,
    SUM(CASE WHEN im.transaction_type = 'OUT' THEN im.quantity ELSE 0 END) AS TotalOutgoingStock,
    (SUM(CASE WHEN im.transaction_type = 'IN' THEN im.quantity ELSE 0 END) - 
     SUM(CASE WHEN im.transaction_type = 'OUT' THEN im.quantity ELSE 0 END)) AS CurrentStockLevel,
    SUM(CASE WHEN im.transaction_type = 'EXP' AND im.expiry_date < CURRENT_DATE THEN im.quantity ELSE 0 END) AS ExpiredItems,
    -- Stock Turnover Rate calculation (avoid division by zero)
    CASE 
        WHEN (SUM(CASE WHEN im.transaction_type = 'IN' THEN im.quantity ELSE 0 END) - 
              SUM(CASE WHEN im.transaction_type = 'OUT' THEN im.quantity ELSE 0 END)) > 0
        THEN 
            SUM(CASE WHEN im.transaction_type = 'OUT' THEN im.quantity ELSE 0 END) / 
            (SUM(CASE WHEN im.transaction_type = 'IN' THEN im.quantity ELSE 0 END) - 
             SUM(CASE WHEN im.transaction_type = 'OUT' THEN im.quantity ELSE 0 END))
        ELSE 0
    END AS StockTurnoverRate
FROM 
    inventory_movements im
JOIN 
    branch_details bd ON im.branch_code = bd.branch_code
WHERE 
    im.transaction_date >= CURRENT_DATE - INTERVAL '3 MONTH' -- Only for the last 3 months
GROUP BY 
    bd.branch_name
ORDER BY 
    StockTurnoverRate DESC; -- Ordered by highest stock turnover rate

-- Number two
Analyze staff performance and sales:
-- Write a query to find:
-- - Staff ID
-- - Staff's branch name
-- - Number of transactions handled
-- - Total sales amount
-- - Average transaction value
-- - Performance score
-- Only for active staff (no resignation date) in 2023

query :
SELECT
    s.staff_id,
    b.branch_name,
    COUNT(st.transaction_id) AS number_of_transactions,
    SUM(st.total_amount) AS total_sales_amount,
    AVG(st.total_amount) AS average_transaction_value,
    s.performance_score
FROM
    staff_records s
JOIN
    branch_details b ON s.branch_code = b.branch_code
LEFT JOIN
    sales_transactions st ON s.staff_id = st.staff_id
WHERE
    s.resignation_date IS NULL
    AND s.join_date <= '2023-12-31'
GROUP BY
    s.staff_id, b.branch_name, s.performance_score
ORDER BY
    total_sales_amount DESC;


Intermediate Queries (Optional)
Customer Purchase Patterns:
-- Write a query to identify:
-- - Products that are frequently bought together
-- - Minimum basket size of 2 items
-- - Show product pairs, frequency of co-occurrence
-- - Filter for combinations occurring at least 10 times
-- Include product names and categories
-- Order by co-occurrence frequency

SELECT
    p1.product_name AS product_1_name,
    p1.category_l1 AS product_1_category,
    p2.product_name AS product_2_name,
    p2.category_l1 AS product_2_category,
    COUNT(*) AS co_occurrence_frequency
FROM
    sales_line_items s1
JOIN
    sales_line_items s2 ON s1.transaction_id = s2.transaction_id
JOIN
    product_hierarchy p1 ON s1.product_code = p1.product_code
JOIN
    product_hierarchy p2 ON s2.product_code = p2.product_code
WHERE
    s1.product_code < s2.product_code  -- Avoid duplicates of pairs (e.g., P001 & P002, and P002 & P001)
GROUP BY
    p1.product_name, p1.category_l1, p2.product_name, p2.category_l1
HAVING
    COUNT(*) >= 10  -- Only include pairs bought at least 10 times
ORDER BY
    co_occurrence_frequency DESC;

